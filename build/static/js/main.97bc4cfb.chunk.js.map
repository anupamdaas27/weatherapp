{"version":3,"sources":["actionCreators.tsx","daySummary.tsx","displayHours.tsx","dayDetail.tsx","weatherDisplay.tsx","App.tsx","serviceWorker.js","rootReducer.tsx","index.tsx"],"names":["promise","polyfill","GET_FIVE_DAY_WEATHER","DaySummary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","summary","info","keyindex","react","className","role","data-toggle","href","concat","day","temp","src","icon","alt","description","React","DisplayHours","displayInfo","itemDetailInfo","itemDetailIndex","key","time","windspeed","hoursdata","hoursindex","bind","assertThisInitialized","_this2","map","houritem","hourindex","DayDetail","getHour","Date","getHours","getDate","date","_getHourlyInfo","dayinfo","itemDay","dayDetail","Math","round","main","dt","weather","wind","speed","dayitem","dayindex","hoursInfo","id","displayHours","WeatherDisplay","_groupByDays","dataWeather","reduce","list","item","forecastDate","dt_txt","substr","push","_getDayInfo","data","getDay","_getIcon","dataIcon","iconName","_getWeatherDecription","dataIconDesc","_getInfo","min","arguments","length","undefined","max","humidity","temp_max","temp_min","minMax","apply","toConsumableArray","avgHumdity","curr","next","weatherforecast","getFiveDayWeather","city","forecastTiles","dayInfo","name","forecasts","latestForecast","tiles","keys","slice","i","dayObj","daySummary","hourlyInfo","connect","reduxState","dispatch","fetch","then","res","json","type","displayWeatherForecast","catch","err","console","log","App","fivedayweather","Route","path","component","Boolean","window","location","hostname","match","initialState","store","createStore","action","objectSpread","compose","applyMiddleware","thunk","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97bc4cfb.chunk.js","sourcesContent":["import \"isomorphic-fetch\";\r\nimport promise from 'es6-promise';\r\npromise.polyfill()\r\n\r\nexport const GET_FIVE_DAY_WEATHER = \"GET_FIVE_DAY_WEATHER\";\r\n\r\n\r\nexport function displayWeatherForecast(data: any){\r\n    return {\r\n        type: GET_FIVE_DAY_WEATHER ,\r\n        data\r\n    }\r\n}\r\n\r\nexport function getFiveDayWeather(){\r\n    return (dispatch: any) => {\r\n        return fetch(\"http://api.openweathermap.org/data/2.5/forecast?id=2641181&units=metric&APPID=ca2e495f97736a5c91c5770c25775436\")\r\n        .then(res => res.json())\r\n        .then(data => dispatch(displayWeatherForecast(data)))\r\n        .catch(err => console.log(err))\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport './App.css';\r\n\r\ninterface Props {\r\n  info: any\r\n  keyindex: number\r\n }\r\ninterface State {\r\n  summary : any\r\n  keyindex: number\r\n}\r\n\r\n\r\nclass DaySummary extends React.Component<Props, State> {\r\n  constructor(props: Props){\r\n    super(props);\r\n    this.state = {\r\n      summary: this.props.info,\r\n      keyindex: this.props.keyindex\r\n    }\r\n  } \r\n\r\n  render() {\r\n    \r\n    return (        \r\n        <li className=\"nav-item\" role=\"tablist\">\r\n        <a role=\"tab\" className=\"nav-link\" data-toggle=\"tab\" href={`#day${this.state.keyindex}`} >\r\n            <div className=\"card\">\r\n                <h5 className=\"card-header\">{this.state.summary.day}</h5>\r\n                <div className=\"card-body\">                    \r\n                    <p className=\"card-text\">{`Max ${this.state.summary.temp[0]}°C`}</p>\r\n                    <p className=\"card-text\">{`Min ${this.state.summary.temp[1]}°C`}</p>\r\n                    <p className=\"card-text\"><img src={this.state.summary.icon} alt={this.state.summary.description} /></p>\r\n                    <p className=\"card-text\">Details</p>\r\n                </div>\r\n            </div>\r\n        </a>        \r\n        </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DaySummary;\r\n","import * as React from \"react\";\r\nimport './App.css';\r\n\r\n   interface Props {\r\n    hoursdata: ReadonlyArray<object>\r\n    hoursindex: number\r\n   }\r\n  interface State {\r\n    hoursdata : ReadonlyArray<object>,\r\n    hoursindex: number\r\n  }\r\n\r\nclass DisplayHours extends React.Component<Props, State> {\r\n  constructor(props: Props){\r\n    super(props);\r\n    this.state = {\r\n        hoursdata : this.props.hoursdata,\r\n        hoursindex : this.props.hoursindex\r\n    }\r\n    this.displayInfo = this.displayInfo.bind(this);\r\n  }\r\n\r\n  displayInfo = (itemDetailInfo: any, itemDetailIndex: number) => {\r\n        \r\n    return (    \r\n        <div className=\"col\" key={itemDetailIndex}>\r\n            <div className=\"card\">\r\n                <h5 className=\"card-header\">{itemDetailInfo.time}</h5>\r\n                <div className=\"card-body\">                    \r\n                    <p className=\"card-text\">{itemDetailInfo.temp}</p>\r\n                    <p className=\"card-text\"><img src={`https://openweathermap.org/img/w/${itemDetailInfo.icon}.png`} alt={itemDetailInfo.description} /></p>\r\n                    <p className=\"card-text\">{itemDetailInfo.windspeed}</p>\r\n                    <p className=\"card-text\">meter/sec</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n  }\r\n  render() {\r\n     return (  \r\n        <div className=\"row\">\r\n            {\r\n                this.state.hoursdata.map((houritem : any , hourindex: number) => (\r\n                        this.displayInfo(houritem, hourindex)\r\n                ))\r\n            }            \r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayHours;\r\n","import * as React from \"react\";\r\nimport './App.css';\r\nimport DisplayHours from './displayHours';\r\n\r\nexport interface Props {\r\n    dayitem: ReadonlyArray<object>\r\n    dayindex: number\r\n  }\r\n  \r\n  interface State {\r\n    dayitem : ReadonlyArray<object>,\r\n    dayindex: number\r\n  }\r\n  interface DayInfo {\r\n    main : string\r\n    dt: string\r\n  }\r\n\r\n  interface dDetail {\r\n    temp: string\r\n    time: string\r\n    icon : string\r\n    description : string\r\n    windspeed : string\r\n}\r\nclass DayDetail extends React.Component<Props, State, DayInfo> {\r\n    constructor(props: Props){\r\n        super(props);\r\n        this.state = {\r\n            dayitem :this.props.dayitem,\r\n            dayindex: this.props.dayindex   \r\n        }\r\n\r\n       \r\n        //let dayDetailAll: Array<any> = [];\r\n        this._getHourlyInfo = this._getHourlyInfo.bind(this);\r\n        this.getHour = this.getHour.bind(this);\r\n        this.getDate = this.getDate.bind(this);\r\n    }\r\n    \r\n    getHour = (time:number) => time ? new Date(time).getHours() : new Date().getHours();\r\n    getDate = (date: string) => date ? new Date(date).getDate() : new Date().getDate();\r\n    _getHourlyInfo = ( dayinfo : ReadonlyArray<object>) => {\r\n        let tempntime: Array<any> = [];\r\n        let dayDetailAll: Array<any> = []; \r\n        tempntime = dayinfo.map((itemDay: any) => {\r\n            let dayDetail = {} as dDetail;   \r\n            dayDetail.temp = Math.round(itemDay.main.temp) + `°C`;\r\n            dayDetail.time = this.getHour(itemDay.dt * 1000) + `:00`;\r\n            dayDetail.icon = itemDay.weather[0].icon;\r\n            dayDetail.description = itemDay.weather[0].description;\r\n            dayDetail.windspeed = itemDay.wind.speed;\r\n            return dayDetail;\r\n        })\r\n        dayDetailAll = tempntime;\r\n        return   dayDetailAll;      \r\n    } \r\n    render() {\r\n        let hoursInfo: Array<any> = [];\r\n        hoursInfo = this._getHourlyInfo(this.state.dayitem);\r\n        return ( \r\n            <div className=\"tab-pane container\" id={`day${this.state.dayindex}`}>          \r\n            <DisplayHours hoursdata={hoursInfo} hoursindex={this.state.dayindex} key={this.state.dayindex}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayDetail;\r\n","import * as React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport  { getFiveDayWeather } from './actionCreators';\r\nimport DaySummary from './daySummary';\r\nimport DayDetail from './dayDetail';\r\n\r\ninterface Props {\r\n    weatherforecast: any;\r\n    getFiveDayWeather(): void;\r\n    \r\n}\r\ninterface State {\r\n    weatherforecast : any\r\n}\r\ninterface MyInterface {\r\n    max : number;\r\n    min : number;\r\n    humidity : number;\r\n}\r\n\r\ninterface DayDetails {\r\n    icon : string\r\n    description : string\r\n    day: string\r\n    temp : Array<number>\r\n    hourlyInfo : string\r\n}\r\n\r\nclass WeatherDisplay extends React.Component<Props, State, MyInterface>{\r\n    constructor(props: Props){\r\n        super(props);        \r\n        this.state = {\r\n            weatherforecast: this.props.weatherforecast\r\n        }\r\n    }    \r\n    componentDidMount(){        \r\n        this.props.getFiveDayWeather(); \r\n    }\r\n    _groupByDays = (dataWeather: ReadonlyArray<object>) => {\r\n        return (dataWeather.reduce((list: any, item: any) => {\r\n            const forecastDate = item.dt_txt.substr(0,10);\r\n            list[forecastDate] = list[forecastDate] || [];\r\n            list[forecastDate].push(item);      \r\n            return list;\r\n          }, {}));        \r\n    };\r\n    _getDayInfo = (data : ReadonlyArray<any>) => {\r\n        const daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n        return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\r\n    };\r\n\r\n    _getIcon = (dataIcon : ReadonlyArray<any>) => { \r\n        let iconName = dataIcon[0].weather[0].icon;\r\n        return `https://openweathermap.org/img/w/${iconName}.png`; \r\n    }\r\n    _getWeatherDecription = (dataIconDesc : ReadonlyArray<any>) => { \r\n        let iconDescription = dataIconDesc[0].weather[0].description;\r\n        return iconDescription; \r\n    }\r\n\r\n    _getInfo = (data : ReadonlyArray<object>, min: Array<number> = [], max: Array<number> = [], humidity: Array<number> = []) => {\r\n        \r\n        \r\n        \r\n        data.map((item: any) => {\r\n            max.push(item.main.temp_max);\r\n            min.push(item.main.temp_min);\r\n            humidity.push(item.main.humidity);\r\n        });\r\n        const  minMax = {\r\n            min: Math.round(Math.min(...min)),\r\n            max: Math.round(Math.max(...max))\r\n        };\r\n        const avgHumdity = Math.round(humidity.reduce((curr, next) => curr + next) / humidity.length);\r\n        //let info =  ['max': minMax.max, 'min':minMax.min, 'humidity':avgHumdity];\r\n        let info: Array<any> = [minMax.max,minMax.min,avgHumdity];\r\n                \r\n        return info;\r\n    };\r\n\r\n    render(){    \r\n             \r\n        let weatherforecastArr = [], weatherforecast: string = '', city : string ='', forecastTiles: Array<any> = [], dayInfo : Array<any> = [];\r\n        if(this.props.weatherforecast.list !== undefined){ \r\n            weatherforecastArr = this.props.weatherforecast.list;\r\n            if(weatherforecastArr.length === 0){\r\n                weatherforecast = \"No weather data to display\";\r\n            }\r\n            \r\n            city= this.props.weatherforecast.city.name;\r\n            const forecasts  = this.props.weatherforecast.list;\r\n            const latestForecast = this._groupByDays(forecasts);\r\n            \r\n            const tiles = Object.keys(latestForecast).map(key => latestForecast[key]);\r\n            \r\n            forecastTiles = tiles.length > 5 ? tiles.slice(0, 5) : tiles;\r\n            if(forecastTiles.length !== 0 ) {\r\n                dayInfo = forecastTiles.map((item, i) => { \r\n                                       \r\n                    let dayObj = {} as DayDetails;\r\n                    dayObj['icon'] = this._getIcon(item);\r\n                    dayObj['description'] = this._getWeatherDecription(item);\r\n                    dayObj['day'] = this._getDayInfo(item);\r\n                    dayObj['temp'] = this._getInfo(item);\r\n                    dayObj['hourlyInfo'] = item;\r\n                    return dayObj;\r\n                })\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div className=\"container\">   \r\n                <h1>5 Day Weather Forecast Application</h1>                \r\n                <div>{city}</div>\r\n                <ul className=\"nav nav-tabs\">\r\n                {(dayInfo.length > 0 && dayInfo.length !== undefined) ? dayInfo.map((item, i) => { return <DaySummary info={item} key={i} keyindex={i} /> }) : ''  }\r\n                </ul>\r\n                <div className=\"tab-content\">\r\n                {(dayInfo.length > 0 && dayInfo.length !== undefined) ? dayInfo.map((item, i) => { return <DayDetail dayitem={item.hourlyInfo} dayindex={i} key={i} /> }) : ''  }\r\n                </div>\r\n            </div>                \r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (reduxState:any) => {\r\n    return {\r\n        weatherforecast: reduxState.weatherforecast\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {getFiveDayWeather})(WeatherDisplay);","import * as React from \"react\";\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport WeatherDisplay from './weatherDisplay';\n\n\nexport interface Props {\n  name: string;\n}\n\ninterface State {\n  fivedayweather: string;\n}\n\nclass App extends React.Component <Props, State>  {\n  constructor(props: Props){\n    super(props);\n    this.state = {\n      fivedayweather:''\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n            \n      <Route path=\"/forecast/fivedayweather\" component={ WeatherDisplay } />\n      \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import  { GET_FIVE_DAY_WEATHER } from './actionCreators';\r\n\r\nconst initialState = {\r\n    weatherforecast : []    \r\n}\r\n\r\nexport default function rootReducer (state = initialState, action : any){\r\n   \r\n    switch(action.type){\r\n        case GET_FIVE_DAY_WEATHER:\r\n            return {...state, weatherforecast: action.data}\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore , applyMiddleware, compose} from 'redux';\nimport rootReducer from './rootReducer';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport thunk from \"redux-thunk\";\nimport 'jquery/dist/jquery.min';\nimport 'popper.js/dist/popper.min';\nimport 'bootstrap/dist/js/bootstrap.min';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nconst store = createStore(rootReducer,  compose(applyMiddleware(thunk) ));\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App name={'123'} />\n        </BrowserRouter>\n    </Provider>, \n    document.getElementById('root')\n);\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}